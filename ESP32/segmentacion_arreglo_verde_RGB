import cv2 as cv
import numpy as np
from picamera.array import PiRGBArray
from picamera import PiCamera
import time
import serial

# Inicializar conexión serial
ser = serial.Serial('/dev/ttyUSB0', 9600)
time.sleep(2)

# Función de calibración de color
def calibrate_color(event, x, y, flags, param):
    global lower_bound_red, upper_bound_red, lower_bound_green, upper_bound_green, color_to_calibrate

    if event == cv.EVENT_LBUTTONDOWN:
        color = frame[y, x]
        if color_to_calibrate == "red":
            lower_bound_red = np.array([color[0] - 40, color[1] - 40, color[2] - 100])
            upper_bound_red = np.array([color[0] + 40, color[1] + 40, color[2] + 100])
            color_to_calibrate = "green"
        elif color_to_calibrate == "green":
            # Ajuste de los límites para el color verde en el espacio RGB
            lower_bound_green = np.array([color[0] - 40, color[1] - 40, color[2] - 40])
            upper_bound_green = np.array([color[0] + 40, color[1] + 40, color[2] + 40])
            color_to_calibrate = "red"

# Inicializar la cámara CAMBIAR PARAMETROS A LOS QUE USAMOS AHORA
camera = PiCamera()
camera.resolution = (1080, 720)
camera.framerate = 32
rawCapture = PiRGBArray(camera, size=(1080, 720))
time.sleep(0.1)

# Valores iniciales
lower_bound_red = np.array([0, 0, 0])
upper_bound_red = np.array([255, 255, 255])
lower_bound_green = np.array([0, 0, 0])
upper_bound_green = np.array([255, 255, 255])
color_to_calibrate = "red"

cv.namedWindow('Original Image')
cv.setMouseCallback('Original Image', calibrate_color)

# Proceso principal
for capture in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
    frame = capture.array

    mask_red = cv.inRange(frame, lower_bound_red, upper_bound_red)
    mask_green = cv.inRange(frame, lower_bound_green, upper_bound_green)

    filtered_frame_red = cv.bitwise_and(frame, frame, mask=mask_red)
    filtered_frame_green = cv.bitwise_and(frame, frame, mask=mask_green)

    # ... (El resto del código de procesamiento de contornos sigue igual)
    
    # Mostrar resultados
    cv.imshow('Original Image', frame)
    cv.imshow('Filtered Red Colors', filtered_frame_red)
    cv.imshow('Filtered Green Colors', filtered_frame_green)

    rawCapture.truncate(0)

    if cv.waitKey(1) & 0xFF == ord('q'):
        break

cv.destroyAllWindows()
